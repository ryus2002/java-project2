# Java 後端開發者 Side Project 規劃

## 專案概念：智慧電商微服務平台

### 專案核心價值
- 完整展示 Java 後端開發和微服務架構能力
- 涵蓋所有條件要求的技術要點
- 納入多數加分條件的技術
- 具有實際應用價值，可以持續擴展

### 技術架構設計

#### 基礎架構：
- Spring Boot 3.2.3 作為應用程式框架
- Spring Cloud 2023.0.0 實現微服務架構
- MySQL 儲存結構化資料
- MongoDB 儲存非結構化資料
- Redis 用於快取和會話管理
- Kafka 實現服務間非同步通訊
- Docker 容器化各服務
- Kubernetes 進行容器編排
- Jenkins 實現 CI/CD 流程

#### 微服務模組劃分：
- 用戶服務 (User Service)
  - 用戶註冊、登入、權限管理
  - JWT 身份驗證
  - 使用 MySQL 儲存用戶資料
- 產品服務 (Product Service)
  - 產品資訊管理
  - 產品分類、搜尋
  - 使用 MySQL + MongoDB (產品詳細描述和圖片資訊)
- 訂單服務 (Order Service)
  - 訂單創建、管理、狀態追蹤
  - 使用 MySQL 儲存訂單資料
  - 使用 Redis 處理高併發下的庫存鎖定
- 支付服務 (Payment Service)
  - 整合模擬支付閘道
  - 支付狀態追蹤
  - 使用 MySQL + Redis
- 通知服務 (Notification Service)
  - 郵件、簡訊通知
  - 使用 Kafka 接收其他服務的通知事件
  - MongoDB 儲存通知模板和記錄
- 分析服務 (Analytics Service)
  - 使用 Spark 處理使用者行為和訂單資料
  - 生成銷售報表和推薦資訊
  - 結果儲存在 MongoDB
- API 閘道 (API Gateway)
  - 使用 Spring Cloud Gateway
  - 實現路由、負載平衡、服務發現
  - 請求限流和安全控制

### 實施步驟

#### 第一階段：基礎架構搭建 (部分完成)
- [x] 設定 Spring Boot 專案
- [x] 建立父級 Maven 專案
- [x] 建立服務註冊與發現中心 (Service Registry)
- [x] 建立配置中心 (Config Server)
- [x] 建立 API 閘道 (API Gateway)
- [x] 建立用戶服務基本架構，包括：
  - [x] 用戶實體類和角色實體類
  - [x] 儲存庫介面
  - [x] DTO 類
  - [x] JWT 安全配置
  - [x] 用戶詳情服務
  - [x] 控制器和服務層
  - [x] 資料庫初始化器
- [x] 建立產品服務基本架構，包括：
  - [x] 產品實體類和產品詳細信息實體類
  - [x] 產品類別實體類
  - [x] 儲存庫介面
  - [x] DTO 類
  - [x] 服務層介面
  - [ ] 服務層實現類
  - [ ] 控制器
- [ ] 配置 MySQL 和 MongoDB

#### 第二階段：微服務擴展
- [ ] 加入訂單和支付服務
- [ ] 實現服務間通訊
- [ ] 整合 Redis 快取

#### 第三階段：進階功能
- [ ] 整合 Kafka 消息佇列
- [ ] 實現通知服務
- [ ] 加入分析功能

#### 第四階段：DevOps 整合
- [ ] 容器化所有服務
- [ ] 設定 Kubernetes 部署
- [ ] 建立 CI/CD 流程

### 專案展示重點
- GitHub Repository
- 清晰的專案結構
- 詳細的 README 文件
- 完整的單元測試和整合測試
- 技術文檔
- API 文檔 (使用 Swagger)
- 系統架構圖
- 資料模型設計
- 演示環境
- 部署在雲端平台 (如 AWS 或 GCP)
- 提供演示帳號和測試資料

### 專案優勢與注意事項
- 全面覆蓋技術要求 - 專案包含所有必要技術和大部分加分技術
- 實際應用價值 - 不只是技術展示，而是有實用性的應用
- 可擴展性 - 可以根據需要逐步擴充功能
- 架構合理 - 遵循微服務最佳實踐，展示系統設計能力
- 程式碼品質 - 所有程式碼都有詳細的註解，遵循最佳實踐

### 目前進度
- 已完成專案初始化設定
- 已建立父級 Maven 專案，使用 Spring Boot 3.2.3 和 Java 17
- 已建立服務註冊與發現中心 (Service Registry)，使用 Eureka Server
- 已建立配置中心 (Config Server)，用於集中管理所有微服務的配置
- 已建立 API 閘道 (API Gateway)，作為所有微服務的統一入口點
- 已建立用戶服務的完整功能，包括實體類、儲存庫、DTO、安全配置、服務層和控制器
- 已建立產品服務的基本架構，包括實體類、儲存庫、DTO 和服務層介面
- 所有程式碼都添加了詳細的註解，說明功能和作用

### 下一步計劃
- 完成產品服務的服務層實現類和控制器
- 配置 MySQL 資料庫和 MongoDB，設計和實現產品資料表
- 添加 Swagger 文檔，提供 API 說明
- 實現基本的前端界面，用於展示和測試 API